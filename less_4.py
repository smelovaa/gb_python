"""
1.Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.
"""
from sys import argv
name, time, salary, bonus = argv
try:
    time = int(time)
    salary = int(salary)
    bonus = int(bonus)
    res = time * salary + bonus
    print(f'заработная плата сотрудника  {res}')
except ValueError:
    print('Not a number')

""" 
2. Представлен список чисел. Необходимо вывести элементы исходного списка, 
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
Для его формирования используйте генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55] #задаем исходный список
new_list = [] # задаем новый пустой список
for el in range(1, len(my_list)): #перебираем элементы списка от 1 до последнего элемента
    if my_list[el] > my_list[el-1]: #если элемент списка больше предыдущего
        (new_list.append(my_list[el])) # то в элемент нового списка записываем элемент (бОльший)
print ("Исходный список ", my_list)
print ("Новый спискок ", new_list)

"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
Подсказка: используйте функцию range() и генератор.
"""
list=[el for el in range (20,240) if el%20==0 or el%21==0] #перебираем элементы списка (елементы списка генерируются на отрезке от 20 до 240. Если элемент делится на 20 или 21 без остатка, то элемент записываем в список
print (list)

"""
5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти чётные числа от 100 до 1000 (включая границы). 
Нужно получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""

list1=[el for el in range(100,1001) if el%2==0]
print (list1)
from functools import reduce
print (reduce(lambda x,y: x*y, list1))

"""
6. Реализовать два небольших скрипта:
итератор, генерирующий целые числа, начиная с указанного;
итератор, повторяющий элементы некоторого списка, определённого заранее. 
"""

#Генерируем целые числа, начиная с указанного
x=int(input("Введите число для начала генерации "))
y=int(input("Введите число для окончания генерации "))
from itertools import count
for el in count(x):
    if el > y:
        break
    else:
    print (el)

#повторяем элементы некоторого списка, определённого заранее
list2=[1, 2, 3]
from itertools import cycle
с = 0
for el in cycle(list2):
    if с > 10:
        break
    print(el)
    с+=1

"""
7.Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. 
Функция вызывается следующим образом: for el in fact(n). 
Она отвечает за получение факториала числа. 
В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
"""

from math import factorial

def factorial_gen(n):
    for i in range(n):
        print(i, end='! = ')
        yield factorial(i)

print("<<Программа вычисления факториала числа>>")
for el in factorial_gen(15):
    print(el)